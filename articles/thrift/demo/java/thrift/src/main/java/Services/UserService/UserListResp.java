/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Services.UserService;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-13")
public class UserListResp implements org.apache.thrift.TBase<UserListResp, UserListResp._Fields>, java.io.Serializable, Cloneable, Comparable<UserListResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserListResp");

  private static final org.apache.thrift.protocol.TField LISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("lists", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserListRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserListRespTupleSchemeFactory();

  public java.util.List<UserInfo> lists; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LISTS((short)1, "lists");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LISTS
          return LISTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LISTS, new org.apache.thrift.meta_data.FieldMetaData("lists", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "UserInfo"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserListResp.class, metaDataMap);
  }

  public UserListResp() {
  }

  public UserListResp(
    java.util.List<UserInfo> lists)
  {
    this();
    this.lists = lists;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserListResp(UserListResp other) {
    if (other.isSetLists()) {
      java.util.List<UserInfo> __this__lists = new java.util.ArrayList<UserInfo>(other.lists.size());
      for (UserInfo other_element : other.lists) {
        __this__lists.add(other_element);
      }
      this.lists = __this__lists;
    }
  }

  public UserListResp deepCopy() {
    return new UserListResp(this);
  }

  @Override
  public void clear() {
    this.lists = null;
  }

  public int getListsSize() {
    return (this.lists == null) ? 0 : this.lists.size();
  }

  public java.util.Iterator<UserInfo> getListsIterator() {
    return (this.lists == null) ? null : this.lists.iterator();
  }

  public void addToLists(UserInfo elem) {
    if (this.lists == null) {
      this.lists = new java.util.ArrayList<UserInfo>();
    }
    this.lists.add(elem);
  }

  public java.util.List<UserInfo> getLists() {
    return this.lists;
  }

  public UserListResp setLists(java.util.List<UserInfo> lists) {
    this.lists = lists;
    return this;
  }

  public void unsetLists() {
    this.lists = null;
  }

  /** Returns true if field lists is set (has been assigned a value) and false otherwise */
  public boolean isSetLists() {
    return this.lists != null;
  }

  public void setListsIsSet(boolean value) {
    if (!value) {
      this.lists = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LISTS:
      if (value == null) {
        unsetLists();
      } else {
        setLists((java.util.List<UserInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LISTS:
      return getLists();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LISTS:
      return isSetLists();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserListResp)
      return this.equals((UserListResp)that);
    return false;
  }

  public boolean equals(UserListResp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_lists = true && this.isSetLists();
    boolean that_present_lists = true && that.isSetLists();
    if (this_present_lists || that_present_lists) {
      if (!(this_present_lists && that_present_lists))
        return false;
      if (!this.lists.equals(that.lists))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLists()) ? 131071 : 524287);
    if (isSetLists())
      hashCode = hashCode * 8191 + lists.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UserListResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLists()).compareTo(other.isSetLists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lists, other.lists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserListResp(");
    boolean first = true;

    sb.append("lists:");
    if (this.lists == null) {
      sb.append("null");
    } else {
      sb.append(this.lists);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (lists == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lists' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserListRespStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserListRespStandardScheme getScheme() {
      return new UserListRespStandardScheme();
    }
  }

  private static class UserListRespStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserListResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserListResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.lists = new java.util.ArrayList<UserInfo>(_list8.size);
                UserInfo _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new UserInfo();
                  _elem9.read(iprot);
                  struct.lists.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setListsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserListResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lists != null) {
        oprot.writeFieldBegin(LISTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lists.size()));
          for (UserInfo _iter11 : struct.lists)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserListRespTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserListRespTupleScheme getScheme() {
      return new UserListRespTupleScheme();
    }
  }

  private static class UserListRespTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserListResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserListResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.lists.size());
        for (UserInfo _iter12 : struct.lists)
        {
          _iter12.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserListResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.lists = new java.util.ArrayList<UserInfo>(_list13.size);
        UserInfo _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = new UserInfo();
          _elem14.read(iprot);
          struct.lists.add(_elem14);
        }
      }
      struct.setListsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

